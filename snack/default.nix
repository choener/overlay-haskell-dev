self: super:

let
in {
  # huge set of dependencies, used often
  dependencies = [
    "aeson"
    "backprop"
    "binary"
    "bits"
    "cassava"
    "cereal"
    "cereal-text"
    "cereal-vector"
    "Chart"
    "Chart-diagrams"
    "deepseq"
    "diagrams"
    "diagrams-lib"
    "diagrams-svg"
    "directory"
    "exceptions"
    "file-embed"
    "filemanip"
    "filepath"
    "Frames"
    "hashable"
    "hmatrix"
    "hmatrix-backprop"
    "lens"
    "log-domain"
    "mtl"
    "mwc-probability"
    "pipes"
    "primitive"
    "QuickCheck"
    "readable"
    "singletons"
    "smallcheck"
    "statistics"
    "storable-tuple"
    "streaming"
    "streaming-bytestring"
    "string-conversions"
    "taggy"
    "taggy-lens"
    "text"
    "text-binary"
    "time"
    "unordered-containers"
    "utf8-string"
    "vector"
    "vector-algorithms"
    "vector-binary-instances"
    "vector-th-unbox"
    "vinyl"
    "wreq"
  ];
  # huge set of default extensions
  extensions = [
    "AllowAmbiguousTypes"
    "BangPatterns"
    "ConstraintKinds"
    "CPP"
    "DataKinds"
    "DefaultSignatures"
    "DeriveDataTypeable"
    "DeriveFoldable"
    "DeriveFunctor"
    "DeriveGeneric"
    "DeriveTraversable"
    "FlexibleContexts"
    "FlexibleInstances"
    "FunctionalDependencies"
    "GADTs"
    "GeneralizedNewtypeDeriving"
    "LambdaCase"
    "LiberalTypeSynonyms"
    "MultiParamTypeClasses"
    "NoMonomorphismRestriction"
    "OverloadedLabels"
    "OverloadedStrings"
    "PatternGuards"
    "PatternSynonyms"
    "PolyKinds"
    "RankNTypes"
    "RecordWildCards"
    "ScopedTypeVariables"
    "StandaloneDeriving"
    "TemplateHaskell"
    "TupleSections"
    "TypeApplications"
    "TypeFamilies"
    "TypeOperators"
    "UndecidableInstances"
    "UnicodeSyntax"
    "ViewPatterns"
  ];
}
